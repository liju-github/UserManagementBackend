// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/user_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/user_service.go -destination=internal/mocks/mock_user_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/liju-github/user-management/internal/models"
	gomock "github.com/golang/mock/gomock" )

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
	isgomock struct{}
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// ConfirmPasswordReset mocks base method.
func (m *MockIUserService) ConfirmPasswordReset(token, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPasswordReset", token, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPasswordReset indicates an expected call of ConfirmPasswordReset.
func (mr *MockIUserServiceMockRecorder) ConfirmPasswordReset(token, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPasswordReset", reflect.TypeOf((*MockIUserService)(nil).ConfirmPasswordReset), token, newPassword)
}

// GetProfile mocks base method.
func (m *MockIUserService) GetProfile(userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIUserServiceMockRecorder) GetProfile(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIUserService)(nil).GetProfile), userID)
}

// Login mocks base method.
func (m *MockIUserService) Login(email, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserServiceMockRecorder) Login(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserService)(nil).Login), email, password)
}

// Logout mocks base method.
func (m *MockIUserService) Logout(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIUserServiceMockRecorder) Logout(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIUserService)(nil).Logout), userID)
}

// RequestPasswordReset mocks base method.
func (m *MockIUserService) RequestPasswordReset(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPasswordReset", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestPasswordReset indicates an expected call of RequestPasswordReset.
func (mr *MockIUserServiceMockRecorder) RequestPasswordReset(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPasswordReset", reflect.TypeOf((*MockIUserService)(nil).RequestPasswordReset), email)
}

// ResendVerification mocks base method.
func (m *MockIUserService) ResendVerification(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerification", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendVerification indicates an expected call of ResendVerification.
func (mr *MockIUserServiceMockRecorder) ResendVerification(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerification", reflect.TypeOf((*MockIUserService)(nil).ResendVerification), email)
}

// Signup mocks base method.
func (m *MockIUserService) Signup(user *models.UserSignupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockIUserServiceMockRecorder) Signup(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockIUserService)(nil).Signup), user)
}

// UpdateProfile mocks base method.
func (m *MockIUserService) UpdateProfile(userID, email string, req *models.UserUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", userID, email, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserServiceMockRecorder) UpdateProfile(userID, email, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserService)(nil).UpdateProfile), userID, email, req)
}

// UploadProfilePicture mocks base method.
func (m *MockIUserService) UploadProfilePicture(userID, cdnURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfilePicture", userID, cdnURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadProfilePicture indicates an expected call of UploadProfilePicture.
func (mr *MockIUserServiceMockRecorder) UploadProfilePicture(userID, cdnURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfilePicture", reflect.TypeOf((*MockIUserService)(nil).UploadProfilePicture), userID, cdnURL)
}

// VerifyEmail mocks base method.
func (m *MockIUserService) VerifyEmail(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockIUserServiceMockRecorder) VerifyEmail(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockIUserService)(nil).VerifyEmail), token)
}
